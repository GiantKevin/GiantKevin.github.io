{"title":"高级人工智能之通过搜索解决问题","date":"2020-03-20T09:02:14.000Z","date_formatted":{"ll":"2020年3月20日","L":"2020/03/20","MM-DD":"03-20"},"link":"2020/03/20/高级人工智能之通过搜索解决问题","comments":true,"tags":["AI"],"categories":["高级人工智能"],"updated":"2020-03-20T09:02:14.000Z","content":"<h3 id=\"1.人工智能中的问题求解\">1.人工智能中的问题求解<a title=\"#1.人工智能中的问题求解\" href=\"#1.人工智能中的问题求解\"></a></h3>\n<ul>\n<li>解：是一个达到目标动作的序列。</li>\n<li>过程：寻找该动作，称其为搜索。</li>\n<li>问题形式化：给定一个目标，决定要考虑的动作与状态。</li>\n<li>为何搜索：对于某些NP完和NP难问题，只能通过搜索来解决。</li>\n<li>问题求解智能体：是一种基于目标的智能体，通过搜索来解决问题。</li>\n</ul>\n<h3 id=\"2.相关术语\">2.相关术语<a title=\"#2.相关术语\" href=\"#2.相关术语\"></a></h3>\n<ul>\n<li>状态空间：可以形式化地定义为——初始状态、动作和转换模型。</li>\n<li>图：状态空间形成一个图，其中<em>节点表示状态、链接表示动作</em>。</li>\n<li>路径：状态空间的一条路径是由一系列动作连接的一个状态序列。</li>\n</ul>\n<h3 id=\"3.问题形式化的5个要素\">3.问题形式化的5个要素<a title=\"#3.问题形式化的5个要素\" href=\"#3.问题形式化的5个要素\"></a></h3>\n<ul>\n<li>初始状态：智能体出发时的状态。</li>\n<li>动作：描述智能体可执行的动作。</li>\n<li>转换模型：描述每个动作在做什么。</li>\n<li>目标测试：确定一个给定的状态是否为目标状态。</li>\n<li>路径代价：每条路径所分配的一个数值代价。</li>\n</ul>\n<h3 id=\"4.搜索算法\">4.搜索算法<a title=\"#4.搜索算法\" href=\"#4.搜索算法\"></a></h3>\n<p><em>一种通用的搜索算法</em></p>\n<p><img src=\"https://i.loli.net/2020/03/20/nmPtyisbGX1E5ez.png\" alt=\"screenShot.png\" class=\"φcx\"></p>\n<p>该frontier(也称为open list)：一种数据结构，用于存储所有的叶节点。</p>\n<p>在frontier上扩展结点的过程持续进行，知道找到一个解或者没有其它状态可扩展。</p>\n<p><em>一种通用的图搜索算法</em></p>\n<p><img src=\"https://i.loli.net/2020/03/20/nvUyDFlw3dBkE8S.png\" alt=\"screenShot.png\" class=\"φcx\"></p>\n<p>该explored(也称为closed list)：一种数据结构，用于记忆每个扩展结点。</p>\n<p>explored和frontier中的结点可以被丢弃。</p>\n<h3 id=\"5.无信息搜索\">5.无信息搜索<a title=\"#5.无信息搜索\" href=\"#5.无信息搜索\"></a></h3>\n<p>定义：无信息搜索也被称为盲目搜索。该术语(无信息、盲目的)意味着该搜索策略没有超过问题定义提供的状态之外的附加信息。</p>\n<p>所有能做的就是生成后继结点，并且从区分一个目标状态或一个非目标状态。</p>\n<p>所有的搜索策略是由节点扩展的顺序加以区分。这些搜索策略是：宽度优先、深度优先以及一致代价搜索。</p>\n<p><strong>无信息搜索的策略评价</strong></p>\n<p>一种无信息搜索是通过选择结点扩展的顺序来定义的。</p>\n<p>其策略可按照如下特性来评价：</p>\n<ul>\n<li>完备性。是否总能找到一个存在的解。</li>\n<li>时间复杂性：花费多长时间找到这个解。</li>\n<li>空间复杂性。需要多少内存。</li>\n<li>最优性：是否总能找到最优的解。</li>\n</ul>\n<p>时间复杂性和空间复杂性用如下术语来衡量：</p>\n<ul>\n<li>b–搜索树的最大分支因子。</li>\n<li>d–最浅的深度。</li>\n<li>m–搜索树的最大深度。</li>\n</ul>\n<p><strong>宽度优先搜索</strong></p>\n<p>搜索策略：扩展<em>最浅的</em>未扩展节点。</p>\n<p>实现方法：使用FIFO(先进先出)队列，即新的后继结点放在后面。</p>\n<p><img src=\"https://i.loli.net/2020/03/20/LDsVGk2NOh7Blg8.png\" alt=\"screenShot.png\" class=\"φcx\"></p>\n<p>宽度优先搜索不能解决指数复杂性问题，小的分支因子除外。</p>\n<p><strong>一致代价搜索</strong></p>\n<p>搜索策略：扩展<em>最低代价</em>的未扩展节点。</p>\n<p>实现方法：队列，按路径代价排序，最低优先。</p>\n<p><img src=\"https://i.loli.net/2020/03/20/IVfFqbysr8zOYw7.png\" alt=\"screenShot.png\" class=\"φcx\"></p>\n<p><strong>深度优先搜索</strong></p>\n<p>搜索策略：扩展最深未扩展节点。</p>\n<p>实现方法：使用LIFO队列，把后继节点放在队列的前端。</p>\n<p><strong>-深度受限搜索</strong></p>\n<p>若状态空间无限，深度优先搜索就会发生失败，这个问题可以用一个预定的深度限制得到解决。</p>\n<p>缺点：</p>\n<p>如果我们选择l &lt; d,即最浅的的目标在深度限制之外，这种方法就会出现额外的不完备性。</p>\n<p>如果我们选择l &gt; d,深度受限搜索也不是最优的。</p>\n<p><img src=\"https://i.loli.net/2020/03/20/9JEPhTsofKFqe3w.png\" alt=\"screenShot.png\" class=\"φcx\"></p>\n<p><strong>-迭代加深搜索</strong></p>\n<p>它将深度优先和宽度优先的优势相结合，逐步增加深度限制反复运行直到找到目标。</p>\n<p>它以深度优先搜索相同的顺序访问搜索树的节点，但先访问节点的累积顺序实际是宽度优先。</p>\n<p><img src=\"https://i.loli.net/2020/03/20/2rOGMmtoCiHnjZA.png\" alt=\"screenShot.png\" class=\"φcx\"></p>\n<p><strong>-双向搜索</strong></p>\n<p>它同时进行两个搜索：一个是从初始状态向前搜索，而另一个则从目标向后搜索。当两者在中间相遇时停止。</p>\n<p><img src=\"https://i.loli.net/2020/03/20/ZcyeQI5btVAsal7.png\" alt=\"screenShot.png\" class=\"φcx\"></p>\n<p>该方法可以通过一种剩余距离的启发式估计来导向。</p>\n<p>-无信息搜索树策略评价</p>\n<p><img src=\"https://i.loli.net/2020/03/20/U3sif48aZdkFE5C.png\" alt=\"screenShot.png\" class=\"φcx\"></p>\n<h3 id=\"6.有信息搜索\">6.有信息搜索<a title=\"#6.有信息搜索\" href=\"#6.有信息搜索\"></a></h3>\n<p>有信息搜索也被称为<em>启发式搜索</em>，这类策略采用超出问题本身定义的、问题特有的知识，因此能够找到比无信息搜索更有效的解。</p>\n<p>一般方法使用如下函数的一个或两者：</p>\n<p>评价函数，记作f(n)，用于选择一个节点进行扩展。</p>\n<p>启发式函数，记作h(n)，作为f的一个组成部分。</p>\n<p><strong>-最佳优先搜索</strong></p>\n<p>搜索策略：一个节点被选择进行扩展是基于一个评价函数，f(n)。大多数的最佳优先搜索算法还包含一个启发式函数，h(n)。</p>\n<p>实现方法：与一致代价搜索相同。然而，最佳优先搜索使用f(n)代替g(n)来整体优先队列。</p>\n<p>启发式函数h(n)：从节点n到目标状态的最低路径估计代价。</p>\n<p>特例：<strong>贪婪搜索、A*搜索</strong></p>\n<p><em>贪婪搜索</em></p>\n<p>搜索策略：试图扩展最接近目标的节点。</p>\n<p>评价函数：<strong>f(n) = h(n)</strong></p>\n<p>它仅使用启发式函数对节点进行评价。</p>\n<p><em>迭代加深A</em>搜索*</p>\n<ul>\n<li>它是迭代加深深度优先搜索的变种，从A*搜索算法借鉴了这一思想，即使用启发式函数来评价到目标的剩余代价。</li>\n</ul>\n<p>它是一种深度优先搜索算法，内存使用率低于A*算法。但是，不同于标准的迭代加深搜索，它集中于探索最有希望的节点，因此不会去搜索树任何处的同样深度。</p>\n<p>比较：</p>\n<ul>\n<li>迭代加深深度优先搜索：使用<strong>搜索深度</strong>作为每次迭代的截止值。</li>\n<li>迭代加深A*搜索：使用信息更丰富的评价函数，f(n) = g(n) + h(n)</li>\n</ul>\n<p>g(n)：到达该节点的代价    h(n)：该节点到目标的估计代价</p>\n","prev":{"title":"针对Github下载速度过慢的解决办法","link":"2020/03/25/针对Github下载速度过慢的解决办法"},"next":{"title":"高级人工智能之智能Agent","link":"2020/03/20/高级人工智能之智能Agent"},"plink":"https://musicpoet.top/2020/03/20/高级人工智能之通过搜索解决问题/","toc":[{"id":"1.人工智能中的问题求解","title":"1.人工智能中的问题求解","index":"1"},{"id":"2.相关术语","title":"2.相关术语","index":"2"},{"id":"3.问题形式化的5个要素","title":"3.问题形式化的5个要素","index":"3"},{"id":"4.搜索算法","title":"4.搜索算法","index":"4"},{"id":"5.无信息搜索","title":"5.无信息搜索","index":"5"},{"id":"6.有信息搜索","title":"6.有信息搜索","index":"6"}],"copyright":{"author":"打马诗人","license":"Attribution-NonCommercial-NoDerivatives 4.0 International<br>(<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)","published":"2020年3月20日","updated":"2020年3月20日"}}