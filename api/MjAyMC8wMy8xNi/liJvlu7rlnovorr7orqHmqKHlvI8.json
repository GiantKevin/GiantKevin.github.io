{"title":"创建型设计模式","date":"2020-03-16T12:36:04.000Z","date_formatted":{"ll":"2020年3月16日","L":"2020/03/16","MM-DD":"03-16"},"link":"2020/03/16/创建型设计模式","comments":true,"tags":["设计模式 面向对象编程"],"categories":["软件体系结构与设计模式"],"updated":"2020-03-16T12:36:04.000Z","content":"<h2 id=\"一.-创建型模式的特点与分类\">一. 创建型模式的特点与分类<a title=\"#一.-创建型模式的特点与分类\" href=\"#一.-创建型模式的特点与分类\"></a></h2>\n<p>创建型模式的主要关注点是“怎么创建对象”，它的主要特点是“<strong>将对象的创建与使用分离</strong>”。这样可以降低系统的耦合度，使用者不需要关注对象的创建细节，对象的创建由相关的工厂来完成。</p>\n<p>创建型模式主要分为以下几种。</p>\n<ul>\n<li>单例模式：某个类只生成一个实例，该类提供一个全局访问点供外部获取该实例，其拓展是有限多例模式。</li>\n<li>原型模式：将一个对象作为原型，通过对其进行复制而克隆出多个和原型类似的新实例。</li>\n<li>工厂方法模式：定义一个用于创建产品的接口，由子类决定生产什么产品。</li>\n<li>抽象工厂模式：提供一个创建产品族的接口，其每个子类可以产生一系列相关的产品。</li>\n<li>建造者模式：将一个复杂的对象分解成多个相对简单的部分，然后根据不同的需要分别创建它们，最后构建该复杂对象。</li>\n</ul>\n<p>以上 5 种创建型模式，除了工厂方法模式属于类创建型模式，其他的全部属于对象创建型模式。</p>\n<h2 id=\"二.单例模式\">二.单例模式<a title=\"#二.单例模式\" href=\"#二.单例模式\"></a></h2>\n<h3 id=\"1.单例模式的定义与特点\">1.单例模式的定义与特点<a title=\"#1.单例模式的定义与特点\" href=\"#1.单例模式的定义与特点\"></a></h3>\n<p>定义：指一个类只有一个实例，且该类能自行创建这个实例的一种模式。</p>\n<p>单例模式有3个特点：</p>\n<ul>\n<li>单例类只有一个实例对象。</li>\n<li>该单例对象必须由单例类自行创建。</li>\n<li>单例类对外提供一个访问该单例的全局访问点。</li>\n</ul>\n<h3 id=\"2.单例模式的结构与应用场景\">2.单例模式的结构与应用场景<a title=\"#2.单例模式的结构与应用场景\" href=\"#2.单例模式的结构与应用场景\"></a></h3>\n<p>单例模式的主要角色如下：</p>\n<ul>\n<li>单例类：包含一个实例且能自行创建这个实例的类。</li>\n<li>访问类：使用单例的类</li>\n</ul>\n<p>应用场景：</p>\n<ul>\n<li>某类只要求生成一个对象的时候。</li>\n<li>当对象需要被共享的场合。由于单例模式只允许创建一个对象，共享该对象可以节省内存，并加快对象访问速度。</li>\n<li>当某类需要频繁实例化，而创建的对象又频繁被销毁的时候。</li>\n</ul>\n<h2 id=\"三.原型模式\">三.原型模式<a title=\"#三.原型模式\" href=\"#三.原型模式\"></a></h2>\n<h3 id=\"1.原型模式的定义与特点\">1.原型模式的定义与特点<a title=\"#1.原型模式的定义与特点\" href=\"#1.原型模式的定义与特点\"></a></h3>\n<p>定义：用一个已经创建的实例作为原型，通过复制该原型对象来创建一个和原型相同或者相似的新对象。</p>\n<p>特点：在这里，原型实例指定了要创建的对象的种类。用这种方法创建对象非常高效，根本不需要知道创建的细节。</p>\n<h3 id=\"2.原型模式的结构与应用场景\">2.原型模式的结构与应用场景<a title=\"#2.原型模式的结构与应用场景\" href=\"#2.原型模式的结构与应用场景\"></a></h3>\n<p>原型模式的主要角色如下：</p>\n<ul>\n<li>抽象原型类：规定具体原型对象必须实现的接口。</li>\n<li>具体原型类：实现抽象原型类的clone()方法，它是可被复制的对象。</li>\n<li>访问类：使用具体原型类中的clone()方法来复制新的对象。</li>\n</ul>\n<p>应用场景：</p>\n<ul>\n<li>对象之间相同或者相似，即只是个别的几个属性不同的时候。</li>\n<li>对象的创建过程比较麻烦，但复制比较简单的时候。</li>\n</ul>\n<h2 id=\"四.工厂方法模式\">四.工厂方法模式<a title=\"#四.工厂方法模式\" href=\"#四.工厂方法模式\"></a></h2>\n<h3 id=\"1.工厂方法模式的定义与特点\">1.工厂方法模式的定义与特点<a title=\"#1.工厂方法模式的定义与特点\" href=\"#1.工厂方法模式的定义与特点\"></a></h3>\n<p>定义：定义一个创建产品对象的工厂接口，将产品对象实际创建工作推迟到具体子工厂类当中。满足创建型模式中要求“创建与使用相分离“的特点。</p>\n<p>我们把创建的对象称为”产品“，把创建产品的对象称为”工厂“。如果要创建的产品不多，只需要一个工厂类就可以完成，这种模式叫”简单工厂模式“，它的缺点是增加新产品时会违背”开闭原则“。</p>\n<p>工厂方法模式的主要优点：</p>\n<ul>\n<li>\n<p>用户只需要知道具体工厂的名称就可得到所要的产品，而不需要知道产品的具体创建过程。</p>\n</li>\n<li>\n<p>在系统增加新的产品时，只需要添加具体产品类和对应的具体工厂类，无须对原工厂进行任何修改，满足开闭原则。</p>\n</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>每增加一个产品就要增加一个具体的产品类和一个对应的具体工厂类，增加了系统的复杂度。</li>\n</ul>\n<h3 id=\"2.工厂方法模式的结构与应用场景\">2.工厂方法模式的结构与应用场景<a title=\"#2.工厂方法模式的结构与应用场景\" href=\"#2.工厂方法模式的结构与应用场景\"></a></h3>\n<p>工厂方法模式的主要角色如下：</p>\n<ul>\n<li>抽象工厂：提供了创建产品的接口，调用者通过它访问具体工厂的工厂方法来创建产品。</li>\n<li>具体工厂：主要是实现抽象工厂中的抽象方法，完成具体产品的创建。</li>\n<li>抽象产品：定义了产品的规范，描述了产品的主要特性和功能。</li>\n<li>具体产品：定义抽象产品角色所定义的接口，由具体工厂来创建，它同具体工厂之间一一对应。</li>\n</ul>\n<p>应用场景：</p>\n<ul>\n<li>客户只知道创建产品的工厂名，而不知道具体的产品名。</li>\n<li>创建对象的任务由多个具体子工厂的某一个完成，而抽象工厂只提供创建产品的接口。</li>\n<li>客户不关系创建产品的细节，只关心产品的品牌。</li>\n</ul>\n<h2 id=\"五.抽象工厂模式\">五.抽象工厂模式<a title=\"#五.抽象工厂模式\" href=\"#五.抽象工厂模式\"></a></h2>\n<h3 id=\"1.抽象工厂模式的定义与特点\">1.抽象工厂模式的定义与特点<a title=\"#1.抽象工厂模式的定义与特点\" href=\"#1.抽象工厂模式的定义与特点\"></a></h3>\n<p>定义：是一种为访问类提供一个创建一组相关或相互依赖对象的接口，且访问类不需要指定所要产品的具体类就能得到同族的不同等级的产品的模式结构。</p>\n<p>抽象工厂模式是工厂方法模式的升级版，工厂方法模式只生产一个等级的产品，而抽象工厂模式可生产多个等级的产品。</p>\n<p>使用抽象工厂模式一般要满足以下条件：</p>\n<ul>\n<li>系统中有多个产品族，每个具体工厂创建同一族但属于不同等级结构的产品。</li>\n<li>系统一次只可能消费其中某一族的产品，即同族的产品一起使用。</li>\n</ul>\n<p>抽象工厂模式的主要优点：</p>\n<ul>\n<li>可以在类的内部对产品族中相关联的多等级产品共同管理，而不必专门引入多个新的类来进行管理。</li>\n<li>当增加一个新的产品族时不需要修改源代码，满足开闭原则。</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>当产品族中需要增加一个新产品时，所有的工厂类都需要进行修改。</li>\n</ul>\n<h3 id=\"2.抽象工厂模式的结构与应用场景\">2.抽象工厂模式的结构与应用场景<a title=\"#2.抽象工厂模式的结构与应用场景\" href=\"#2.抽象工厂模式的结构与应用场景\"></a></h3>\n<p>抽象工厂模式的主要角色如下：</p>\n<ul>\n<li>\n<p>抽象工厂：提供了创建产品的接口，它包含多个创建产品的方法 ，可以创建多个不同等级的产品。</p>\n</li>\n<li>\n<p>具体工厂：主要是实现抽象工厂中的多个抽象方法，完成具体产品的创建。</p>\n</li>\n<li>\n<p>抽象产品：定义了产品的规范，描述了产品的主要特性和功能，抽象工厂模式有多个抽象产品。</p>\n</li>\n<li>\n<p>具体产品：实现了抽象产品角色所定义的接口，由具体工厂来创建，它同具体工厂之间是多对一的关系。</p>\n</li>\n</ul>\n<p>应用场景：</p>\n<ul>\n<li>\n<p>当需要创建的对象是一系列相互关联或相互依赖的产品族时。</p>\n</li>\n<li>\n<p>系统中有多个产品族，但每次只使用其中的某一族产品。</p>\n</li>\n<li>\n<p>系统中提供了产品的类库，且所有产品的接口相同，客户端不依赖产品实例的创建细节和内部结构。</p>\n</li>\n</ul>\n<h2 id=\"六.建造者模式\">六.建造者模式<a title=\"#六.建造者模式\" href=\"#六.建造者模式\"></a></h2>\n<h3 id=\"1.建造者模式的定义与特点\">1.建造者模式的定义与特点<a title=\"#1.建造者模式的定义与特点\" href=\"#1.建造者模式的定义与特点\"></a></h3>\n<p>定义：指将一个复杂对象的构造与它的表示分离，使同样的构建过程可以创建不同的表示，这样的设计模式被称为”建造者模式“。它将一个复杂的对象分解为多个简单的对象，然后一步步构建而成，它将变与不变相分离，即产品的组成部分是不变的，但每一部分是可以灵活选择的。</p>\n<p>建造者模式的主要优点：</p>\n<ul>\n<li>各个具体的建造者相互独立，有利于系统的扩展。</li>\n<li>客户端不必知道产品内部组成的细节，便于控制细节风险。</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>产品的组成部分必须相同，这限制了其使用范围。</li>\n<li>如果产品的内部变化复杂，该模式会增加很多建造者类。</li>\n</ul>\n<p>建造者模式和工厂模式的关注点不同：建造者模式注重零部件的组装过程，而工厂模式更注重零部件的创建过程，但两者可以结合使用。</p>\n<h3 id=\"2.建造者模式的结构与应用场景\">2.建造者模式的结构与应用场景<a title=\"#2.建造者模式的结构与应用场景\" href=\"#2.建造者模式的结构与应用场景\"></a></h3>\n<p>建造者模式的主要角色如下：</p>\n<ul>\n<li>\n<p>产品角色：它是包含多个组成部件的复杂对象，由具体建造者来创建其各个滅部件。</p>\n</li>\n<li>\n<p>抽象建造者：它是一个包含创建产品各个子部件的抽象方法的接口，通常还包含一个返回复杂产品的方法 。</p>\n</li>\n<li>\n<p>具体建造者：实现 Builder 接口，完成复杂产品的各个部件的具体创建方法。</p>\n</li>\n<li>\n<p>指挥者：它调用建造者对象中的部件构造与装配方法完成复杂对象的创建，在指挥者中不涉及具体产品的信息。</p>\n</li>\n</ul>\n<p>应用场景：</p>\n<ul>\n<li>\n<p>创建的对象较复杂，由多个部件构成，各个部件面临着复杂的变化，但构件间的建造顺序是稳定。</p>\n</li>\n<li>\n<p>创建复杂对象的算法独立于该对象的组成部分以及它们的装配方式，即产品的构建过程和最终的表示是独立的。</p>\n</li>\n</ul>\n<hr>\n<p>以上是对5种创建型模式的简单介绍，文章整理自<a href=\"http://c.biancheng.net/view/1335.html\" target=\"_blank\">C语言中心网</a> ,感谢您的阅读。</p>\n","prev":{"title":"高级人工智能之智能Agent","link":"2020/03/20/高级人工智能之智能Agent"},"plink":"https://musicpoet.top/2020/03/16/创建型设计模式/","toc":[{"id":"一.-创建型模式的特点与分类","title":"一. 创建型模式的特点与分类","index":"1"},{"id":"二.单例模式","title":"二.单例模式","index":"2","children":[{"id":"1.单例模式的定义与特点","title":"1.单例模式的定义与特点","index":"2.1"},{"id":"2.单例模式的结构与应用场景","title":"2.单例模式的结构与应用场景","index":"2.2"}]},{"id":"三.原型模式","title":"三.原型模式","index":"3","children":[{"id":"1.原型模式的定义与特点","title":"1.原型模式的定义与特点","index":"3.1"},{"id":"2.原型模式的结构与应用场景","title":"2.原型模式的结构与应用场景","index":"3.2"}]},{"id":"四.工厂方法模式","title":"四.工厂方法模式","index":"4","children":[{"id":"1.工厂方法模式的定义与特点","title":"1.工厂方法模式的定义与特点","index":"4.1"},{"id":"2.工厂方法模式的结构与应用场景","title":"2.工厂方法模式的结构与应用场景","index":"4.2"}]},{"id":"五.抽象工厂模式","title":"五.抽象工厂模式","index":"5","children":[{"id":"1.抽象工厂模式的定义与特点","title":"1.抽象工厂模式的定义与特点","index":"5.1"},{"id":"2.抽象工厂模式的结构与应用场景","title":"2.抽象工厂模式的结构与应用场景","index":"5.2"}]},{"id":"六.建造者模式","title":"六.建造者模式","index":"6","children":[{"id":"1.建造者模式的定义与特点","title":"1.建造者模式的定义与特点","index":"6.1"},{"id":"2.建造者模式的结构与应用场景","title":"2.建造者模式的结构与应用场景","index":"6.2"}]}],"copyright":{"custom":"转载请注明出处"}}