{"title":"Image hashing with OpenCV and Python","date":"2020-04-22T05:51:32.000Z","date_formatted":{"ll":"2020年4月22日","L":"2020/04/22","MM-DD":"04-22"},"link":"2020/04/22/Image-hashing-with-OpenCV-and-Python","comments":true,"tags":["CV"],"categories":["图像处理"],"updated":"2020-04-22T05:51:32.000Z","content":"<blockquote>\n<p>写在前面：这篇文章摘自<strong>Adrian Rosebrock</strong>的一篇技术博客，这里只做简单的翻译总结。如果想直接看原文的话，可以点击以下链接查看：<a href=\"https://www.pyimagesearch.com/2017/11/27/image-hashing-opencv-python/\" target=\"_blank\">Image hashing with OpenCV and Python</a></p>\n</blockquote>\n<p><img src=\"https://ftp.bmp.ovh/imgs/2020/04/9f118c121b0f31be.png\" alt=\"\" class=\"φcx\"></p>\n<p>Image hashing 或者 perceptual hashing 的过程包括：</p>\n<ol>\n<li>检测一张图片的内容</li>\n<li>根据输入图片的内容，为它创建一个特殊的hash值</li>\n</ol>\n<p>或许最出名的Image hashing 工具/服务是<a href=\"https://tineye.com/\" target=\"_blank\">TinEye</a>，它是一个逆向的图片搜索引擎。</p>\n<p>使用TinEye, 用户可以：</p>\n<ol>\n<li>上传一张图片</li>\n<li>TinEye会告诉用户网上这张图片的出处</li>\n</ol>\n<p>在这节的开头，你可以看到一个可视化的perceptual hashing/image hashing的例子。</p>\n<p>对于一张给定的输入图片，我们的算法会根据图像的视觉表现来计算图片的hash值。同时外观<strong>相似</strong>的图像，也应该有尽可能相似的hash值。（这里相似是指hash值之间的Hamming距离）</p>\n<p>通过使用image hashing 算法，我们可以在一定的时间内找到近似的图片。其中最差的情况是，我们需要遍历整个数据结构，时间复杂度是O(lg n)。</p>\n<p>这里做个提醒，通过这篇文章我们会：</p>\n<ol>\n<li>讨论image hashing/perceptual hashing(和为什么传统的hash不奏效)</li>\n<li>实现image hashing， 特别是difference hashing(dHash)</li>\n<li>使用image hashing来解决现实世界中的问题</li>\n</ol>\n<h3 id=\"step-#1:-将图片转化为灰度图\"><strong>Step #1: 将图片转化为灰度图</strong><a title=\"#step-#1:-将图片转化为灰度图\" href=\"#step-#1:-将图片转化为灰度图\"></a></h3>\n","next":{"title":"OOP设计7大设计原则总结","link":"2020/04/09/OOP设计7大设计原则总结"},"plink":"https://musicpoet.top/2020/04/22/Image-hashing-with-OpenCV-and-Python/","toc":[{"id":"step-#1:-将图片转化为灰度图","title":"Step #1: 将图片转化为灰度图","index":"1"}],"copyright":{"custom":"转载请注明出处"}}